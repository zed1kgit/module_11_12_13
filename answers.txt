Что такое паттерн (обычный)? Из чего он
состоит? Базовые принципы применения
паттернов.

Паттерны - это типовой способ построения программы.
Они состоят из нескольких классов и объектов которые
взаимодействуют друг с другом определенным образом.
Базовые принципы:
инкапсулируйте то, что меняется;
программируйте на уровне интерфейса;
предпочитайте композицию наследованию.

-------------------------------------------------------
Перечислите разновидности паттернов и
минимум по 3 примера для каждой из них.

Порождающие паттерны:
Фабричный метод, Абстрактная фабрика, Строитель

Структурные паттерны:
Адаптер, Мост, Компоновщик

-------------------------------------------------------
Расшифруйте аббревиатуру SOLID (можно на
русском).

S - Single Responsibility Principle:
У класса должен быть только один мотив для изменения.
O - Open/Closed Principle
Расширяйте классы, но не изменяйте их первоначальный код.
L - Liskov Substitution Principle
Подклассы должны дополнять, а не замещать поведение базового класса.
I - Interface Segregation Princip
Клиенты не должны зависеть от методов, которые они не используют.
D - Dependency Inversion Principle
Классы верхних уровней не должны зависеть от классов нижних уровней. Оба должны зависеть от
абстракций. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.

-------------------------------------------------------
Что такое MVC, для чего предназначен каждый
элемент (вкратце).

MVC: Model - View - Controller

Model - это структурная часть программы, отвечающая за работу с данными.
View - это часть программы, отвечающая за интерфейс пользователя
Controller - это промежуточное звено между Model и View

-------------------------------------------------------
Что такое многопоточность? Почему возникла
необходимость ее появления. Какой модуль
используется в Python для работы с потоками?

Многопоточность - это распределение задач на разные потоки
для оптимизации выполнения программы.
Используется стандартный модуль Python - threading

-------------------------------------------------------
GIL - что это такое? На каком уровне он работает
в Python.

GIL - это механизм синхронизации, который используется в Python
для предотвращения одновременного выполнения кода в многопоточных приложениях.
GIL работает на уровне виртуальной машины Python.

-------------------------------------------------------
Основное отличие HTTP от HTTPS? Из чего
состоит HTTP запрос приведите 3 примера
методов запроса. Из чего состоит HTTP ответ,
какие основные типы кодов статуса могут быть
получены при ответе.

HTTPS использует шифрование для защиты передаваемых данных, в то время как HTTP передает данные в открытом виде.
Методы запроса: GET, POST, HEAD
HTTP ответ состоит из трех частей:
Код статуса - двухзначное число, которое указывает на успешность или неудачу запроса.
Заголовки - дополнительная информация о ответе, такая как тип контента, размер, дата и т.д.
Тело ответа - содержит фактические данные, которые были запрошены клиентом.
Основные типы кодов статуса, которые могут быть получены при ответе:
2xx - успешный ответ.
3xx - перенаправление.
4xx - ошибка клиента.
5xx - ошибка сервера.

-------------------------------------------------------
Перечислите уровни модели OSI.

Физический уровень
Канальный уровень
Сетевой уровень
Транспортный уровень
Сеансовый уровень
Представительский уровень
Прикладной уровень

-------------------------------------------------------
Из чего состоит кадр (фрейм) сообщения когда
мы его пересылаем по TCP/IP протоколу.

Заголовок: Содержит информацию о начале и конце кадра, а также информацию о протоколе, используемом для передачи данных.
Данные: Содержат само сообщение, которое мы хотим передать.
Контрольная сумма: Используется для проверки целостности данных после их передачи.
Флаг: Определяет, является ли кадр последним в потоке данных или нет.
Адрес назначения: Указывает на устройство, которому предназначен кадр.
Адрес источника: Указывает, откуда был отправлен кадр.
Длина кадра: Содержит информацию о длине всего кадра, включая заголовок и данные.

-------------------------------------------------------
Отличия между TCP/IP и UDP протоколами
(можно скрином)

TCP используется для передачи файлов, электронной почты, веб-страниц и других приложений, требующих надежности.
UDP используется для передачи аудио и видео потоков, онлайн-игр, DNS запросов и других приложений, где важна скорость.
